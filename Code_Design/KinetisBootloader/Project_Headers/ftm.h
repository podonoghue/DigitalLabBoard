/**
 * @file     ftm.h (180.ARM_Peripherals/Project_Headers/ftm.h)
 * @brief    Flexitimer Timer Module
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 *      Author: podonoghue
 */
#ifndef HEADER_FTM_H
#define HEADER_FTM_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stddef.h>
#include <cmath>
#include "pin_mapping.h"
#include "gpio.h"

#if false // /FTM/enablePeripheralSupport

/*
 * Default port information
 */
namespace USBDM {

/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */


/**
 * Controls value forced to pin by forceChannelOutputs()
 */
enum FtmChannelForce {    // Enable|Value
   FtmChannelForce_Release = 0x00|(0x00<<8), ///< Release channel output
   FtmChannelForce_Low     = 0xFF|(0x00<<8), ///< Force channel output low
   FtmChannelForce_High    = 0xFF|(0xFF<<8), ///< Force channel output high
};

/**
 * Provides shared methods.
 */
class FtmBase {

private:
   FtmBase(const FtmBase&) = delete;
   FtmBase(FtmBase&&) = delete;

public:
#if true // /PCR/_present
   CreatePeripheralPinChecker("FTM");
#endif

protected:
   // Constructor
   constexpr FtmBase(uint32_t baseAddress) : ftm(baseAddress) {};
   ~FtmBase() = default;

   /** Allow access owning FTM */
   const HardwarePtr<FTM_Type> ftm;

   /**
    * Limit index to permitted pin index range
    * Used to prevent noise from static assertion checks that detect a condition already detected in a more useful fashion.
    *
    * @tparam Inf    Associated info table
    * @param index   Index to limit
    *
    * @return Index limited to permitted range
    */
   template <class Inf>
   static inline constexpr int limitIndex(int index) {
      if (index<0) {
         return 0;
      }
      if (index>(Inf::numSignals-1)) {
         return Inf::numSignals-1;
      }
      return index;
   }

   /**
    * Callback to catch unhandled interrupt
    */
   static void unhandledCallback() {
      setAndCheckErrorCode(E_NO_HANDLER);
   }

   /**
    * Get Timer input frequency.
    *
    * @param ftmClockSource Clock source
    *
    * @return Clock frequency in Hz
    */
   virtual float getInputClockFrequencyVirtual(FtmClockSource ftmClockSource) const = 0;

public:
   /**
    * Structure for FTM channel.
    */
   struct FtmChannelRegs {
      __IO uint32_t  CnSC; /**< 000C: Channel  Status and Control */
      __IO uint32_t  CnV;  /**< 0010: Channel  Value              */
   };

/*
 *   // Member functions (mirrored)
 */
   /**
    * Stop timer counter.
    * This simply disables the counter clock source. 

    * To restart use setClockSource() or configure();
    *
    * @note This function will affect all channels of the timer.
    * @note A illegal access trap will occur if the timer has not been enabled
    */
   void stopCounter() const {
     ftm->SC = (ftm->SC&~FTM_SC_CLKS_MASK);
   }
   
   /**
    * Set Clock Source and Counter clock prescaler
    *
    * @param ftmClockSource Selects the clock source for the module
    * @param ftmPrescale    Selects the prescaler for the module
    */
   void selectClock(
         FtmClockSource ftmClockSource,
         FtmPrescale    ftmPrescale) const {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~(FTM_SC_CLKS_MASK|FTM_SC_PS_MASK))|(ftmClockSource|ftmPrescale);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }

   /**
    * Set Counting mode
    *
    * @param ftmCountMode Counting Mode
    *
    * @note This function will affect all channels of the timer.
    * @note The timer will be disabled while making changes.
    */
   void setCountMode(FtmCountMode ftmCountMode) const {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~FTM_SC_CPWMS_MASK)|(ftmCountMode);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }
   
   /**
    * Get Counting mode
    *
    * @param ftmCountMode Counting Mode
    */
   FtmCountMode getCountMode() const {
   
      return (FtmCountMode)(ftm->SC&~FTM_SC_CPWMS_MASK);
   }

   /**
    * Set Clock Source
    *
    * @param ftmClockSource Selects the clock source for the module
    *
    * @note This function will affect all channels of the timer.
    * @note The timer will be disabled while making changes.
    */
   void setClockSource(FtmClockSource ftmClockSource) const {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~FTM_SC_CLKS_MASK)|(ftmClockSource);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }
   
   /**
    * Get Clock Source
    *
    * @param ftmClockSource Selects the clock source for the module
    */
   FtmClockSource getClockSource() const {
   
      return (FtmClockSource)(ftm->SC&~FTM_SC_CLKS_MASK);
   }

   /**
    * Set Counter clock prescaler
    *
    * @param ftmPrescale Selects the prescaler for the module
    *
    * @note This function will affect all channels of the timer.
    * @note The timer will be disabled while making changes.
    */
   void setPrescaler(FtmPrescale ftmPrescale) const {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~FTM_SC_PS_MASK)|(ftmPrescale);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }
   
   /**
    * Get Counter clock prescaler
    *
    * @param ftmPrescale Selects the prescaler for the module
    */
   FtmPrescale getPrescaler() const {
   
      return (FtmPrescale)(ftm->SC&~FTM_SC_PS_MASK);
   }

   /**
    * Set End value for counter
    * This value is write-buffered and updated by CNTIN synchronisation
    *
    * @param ticks The timer counts from 0 to this value
    *
    * @note This function will affect all channels of the timer.
    */
   void setCounterMaximumValue(const Ticks& ticks) const {
   
      // Write new value
      ftm->MOD = ticks;
   }
   
   /**
    * Get End value for counter
    *
    * @param ticks The timer counts from 0 to this value
    */
   Ticks getCounterMaximumValue() const {
   
      return Ticks(ftm->MOD);
   }

   /**
    * Set period
    *
    * @param[in] period   Period in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note The counter load value (CNTIN) is cleared
    * @note The counter modulo value (MOD) is modified to obtain the requested period
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   ErrorCode setPeriod(Seconds period) const {
   
      uint16_t modValue = 0;
   
      uint8_t sc = ftm->SC;
   
      float inputClock = getInputClockFrequencyVirtual((FtmClockSource)(sc&FTM_SC_CLKS_MASK));
      ErrorCode rc = FtmCommonInfo::calculateTimingParameters(inputClock, period, sc, modValue);
      if (rc != E_NO_ERROR) {
         return rc;
      }
      // Disable timer to change prescaler and period
      ftm->SC  = 0;
   
      // Configure for modulo operation
      ftm->MOD = modValue;
   
      // Clear counter
      ftm->CNT = 0;
   
      // Set prescale and enable timer
      ftm->SC  = sc;
   
      return E_NO_ERROR;
   }
   
   /**
    * Set maximum interval for input-capture or output compare.
    * Input Capture and Output Compare will be able to operate over
    * at least this period without overflow.
    *
    * @param[in] interval Interval in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note Counter is configured for free-running mode i.e. 0-65535
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   ErrorCode setMaximumInterval(Seconds interval) const {
   
      uint16_t       modValue;
   
      uint8_t sc = ftm->SC;
   
      float inputClock = getInputClockFrequencyVirtual((FtmClockSource)(sc&FTM_SC_CLKS_MASK));
      ErrorCode rc = FtmCommonInfo::calculateTimingParameters(inputClock, interval, sc, modValue);
      if (rc != E_NO_ERROR) {
         return rc;
      }
   
      // Disable timer to change prescaler and period
      ftm->SC  = 0;
   
      // Configure for free-running mode
      // This is the usual value for IC or OC set-up
      ftm->MOD = 0_ticks;
   
      // Clear counter
      ftm->CNT = 0;
   
      // Set prescale and enable timer
      ftm->SC  = sc;
   
      return E_NO_ERROR;
   }

   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   float getTickFrequencyAsFloat() const {
   
      // Calculate timer prescale factor
      float prescaleFactor = 1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);
   
      return getInputClockFrequencyVirtual((FtmClockSource)(ftm->SC&FTM_SC_CLKS_MASK))/prescaleFactor;
   }
   
   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   uint32_t getTickFrequencyAsInt() const {
   
      // Calculate timer prescale factor
      int prescaleFactor = 1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);
   
      return getInputClockFrequencyVirtual((FtmClockSource)(ftm->SC&FTM_SC_CLKS_MASK))/prescaleFactor;
   }

   /**
    * Convert time in microseconds to time in ticks
    *
    * @param[in] time Time in microseconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    * @note Will set error code if calculated value is less the Timer minimum resolution
    */
   Ticks convertMicrosecondsToTicks(int time) const {
   
      // Calculate period
      uint32_t tickRate = getTickFrequencyAsInt();
      uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      return Ticks(uint32_t(rv));
   }
   
   /**
    * Converts time in seconds to time in ticks
    *
    * @param[in] seconds Time interval in seconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). 

    * @note Will set error code if calculated value is less the minimum resolution
    */
   Ticks convertSecondsToTicks(Seconds seconds) const {
   
      // Calculate period
      float    tickRate = getTickFrequencyAsFloat();
      uint64_t rv       = rintf((float)seconds*tickRate);
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      return Ticks(uint32_t(rv));
   }
   
   /**
    * Convert time in ticks to time in microseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in microseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   uint32_t convertTicksToMicroseconds(Ticks timeInTicks) const {
   
      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }
   
   /**
    * Convert time in ticks to time in milliseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in milliseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   uint32_t convertTicksToMilliseconds(Ticks timeInTicks) const {
   
      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }
   
   /**
    * Convert time in ticks to time in seconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in seconds
    */
   Seconds convertTicksToSeconds(Ticks timeInTicks) const {
      return static_cast<float>((unsigned)timeInTicks)/getTickFrequencyAsFloat();
   }
   /**
    * Get Timer count
    *
    * @return Timer count value
    */
   uint16_t getTime() const {
      return ftm->CNT;
   }
   
   /**
    * Reset counter to initial value
    */
   void resetTime() const {
      // Note: writing ANY value loads CNT from CNTIN
      ftm->CNT = 0;
   }
   
   /**
    * Get timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    */
   unsigned getInterruptFlags() const {
      return ftm->STATUS;
   }
   
   /**
    * Clear selected timer event flags
    *
    * @param channelMask Mask indicating which channel flags to clear
    *                    There is one bit for each channel
    *
    * @note Flags will not be cleared if the channel is configured for DMA
    */
   void clearSelectedInterruptFlags(uint32_t channelMask) const {
      (void)ftm->STATUS;
      ftm->STATUS = ~channelMask;
   }
   
   /**
    * Clear timer overflow event flag
    */
   void clearOverflowInterruptFlag() const {
      // Clear TOI flag (read & w0c)
      ftm->SC = ftm->SC & ~FTM_SC_TOF_MASK;
   }
   
   /**
    * Get and clear timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    *
    * @note Only flags captured in the return value are cleared
    * @note Flags will not be cleared if the channel is configured for DMA
    */
   unsigned getAndClearInterruptFlags() const {
      // Note requires read and write zero to clear flags
      // so only flags captured in status are cleared
      unsigned status = ftm->STATUS;
      ftm->STATUS = ~status;
      return status;
   }
   
   /**
    * Enable Timer Overflow interrupts
    */
   void enableTimerOverflowInterrupts() const {
      ftm->SC = ftm->SC | FTM_SC_TOIE_MASK;
   }
   
   /**
    * Disable Timer Overflow interrupts
    */
   void disableTimerOverflowInterrupts() const {
      ftm->SC = ftm->SC & ~FTM_SC_TOIE_MASK;
   }
   
   /**
    * Enable fault interrupts
    */
   void enableFaultInterrupt() const {
      ftm->MODE = ftm->MODE | FTM_MODE_FAULTIE_MASK;
   }
   
   /**
    * Disable fault interrupts
    */
   void disableFaultInterrupt() const {
      ftm->MODE = ftm->MODE & ~FTM_MODE_FAULTIE_MASK;
   }
   
   /**
    *  Disables fault detection input
    *
    *  @tparam inputNum        Number of fault input to enable (0..3)
    */
   template<int inputNum>
   void disableFault() const {
      static_assert(inputNum<=4, "Illegal fault channel");
   
      // Enable fault on channel
      ftm->FLTCTRL = ftm->FLTCTRL & ~(1<<inputNum);
   }
   
   /**
    *  Enables fault detection input
    *
    *  @tparam inputNum           Number of fault input to enable (0..3)
    *
    *  @param[in]  polarity       Polarity of fault input
    *  @param[in]  filterEnable   Whether to enable filtering on the fault input
    *  @param[in]  filterDelay    Delay used by the filter (1..15) - Applies to all channels
    *
    *  NOTE - the filter delay is shared by all inputs
    */
public:
   template<uint8_t inputNum>
   void enableFault(
         Polarity polarity     = ActiveHigh,
         bool     filterEnable = false,
         uint32_t filterDelay  = FTM_FLTCTRL_FFVAL_MASK>>(FTM_FLTCTRL_FFVAL_SHIFT+1)) const {
   
      if (polarity) {
         // Set active high
         ftm->FLTPOL = ftm->FLTPOL & ~(1<<inputNum);
      }
      else {
         // Set active low
         ftm->FLTPOL = ftm->FLTPOL | (1<<inputNum);
      }
      if (filterEnable) {
         // Enable filter & set filter delay
         ftm->FLTCTRL = ((ftm->FLTCTRL) & ~(FTM_FLTCTRL_FFVAL_MASK)) | (1<<(inputNum+FTM_FLTCTRL_FFLTR0EN_SHIFT)) | FTM_FLTCTRL_FFVAL(filterDelay);
      }
      else {
         // Disable filter
         ftm->FLTCTRL = ftm->FLTCTRL & ~(1<<(inputNum+FTM_FLTCTRL_FFLTR0EN_SHIFT));
      }
      // Enable fault input
      ftm->FLTCTRL = ftm->FLTCTRL | (1<<inputNum);
      // Enable fault mode (All channels, manual)
      ftm->MODE    = ftm->MODE | FTM_MODE_FAULTM(2);
   }

   /**
    * Set polarity of all channels
    *
    * @param channelMask   Bit mask 0 => active-high, 1 => active-low
    *                      This can be created by ORing together FtmPolarity_ChN_ActiveLow values
    */
   void setPolarity(uint32_t channelMask) const {
      ftm->POL = channelMask;
   }
   
   /**
    * Set polarity of selected channel
    *
    * @param ftmPolarity  Channel polarity to set
    */
   void setPolarity(FtmPolarity ftmPolarity) const {
         ftm->POL= (ftm->POL&(ftmPolarity>>8))|ftmPolarity;
   }

   /*
    * *****************************************************************
    *          Channel functions
    * *****************************************************************
    */
   
   /**
    * Set action on event
    * (/FTM0/ftm_cnsc_action_independent[0])
    *
    * @param ftmChannelAction Enable interrupt or DMA on channel event
    * @param ftmChannelNum    Selects a channel
    */
   void setAction(
         FtmChannelAction ftmChannelAction,
         FtmChannelNum    ftmChannelNum)  const {
   
      ftm->CONTROLS[ftmChannelNum].CnSC =
         (ftm->CONTROLS[ftmChannelNum].CnSC&~(FTM_CnSC_CHIE_MASK|FTM_CnSC_DMA_MASK)) | ftmChannelAction;
   }
   
   /**
    * Set PWM duty cycle.
    * Higher precision float version
    *
    * @param[in] dutyCycle  Duty-cycle as percentage (float)
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
    */
   void setDutyCycle(float dutyCycle, int channel) const {
      if (ftm->SC&FTM_SC_CPWMS_MASK) {
         ftm->CONTROLS[channel].CnV  = round((dutyCycle*ftm->MOD)/100.0f);
      }
      else {
         ftm->CONTROLS[channel].CnV  = round((dutyCycle*(ftm->MOD+1))/100.0f);
      }
   }
   
   /**
    * Set PWM duty cycle
    *
    * @param[in] dutyCycle  Duty-cycle as percentage
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
    */
   void setDutyCycle(int dutyCycle, int channel) const {
      if (ftm->SC&FTM_SC_CPWMS_MASK) {
         ftm->CONTROLS[channel].CnV  = (dutyCycle*ftm->MOD)/100;
      }
      else {
         ftm->CONTROLS[channel].CnV  = (dutyCycle*(ftm->MOD+1))/100;
      }
   }
   
   /**
    * Set PWM high time in ticks
    * Assumes value is less than period
    *
    * @param[in] highTime   PWM high time in ticks
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    * @return E_TOO_LARGE on success
    *
    * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
    */
   ErrorCode setHighTime(Ticks highTime, int channel) const {
   
      if (ftm->SC&FTM_SC_CPWMS_MASK) {
         // In CPWM the pulse width is doubled
         highTime = Ticks((highTime+1_ticks)/2U);
      }
#ifdef DEBUG_BUILD
      if ((unsigned)highTime > ftm->MOD) {
         return setErrorCode(E_TOO_LARGE);
      }
#endif
      ftm->CONTROLS[channel].CnV  = (unsigned)highTime;
      return E_NO_ERROR;
   }
   
   /**
    * Get Timer event time
    *
    * @param[in] channel    Timer channel
    *
    * @return Absolute time of last event in ticks i.e. value from timer event register
    */
   Ticks getEventTime(int channel) const {
      return Ticks(ftm->CONTROLS[channel].CnV);
   }
   
   /**
    * Set Timer event time
    *
    * This value is write-buffered and updated by Cnv synchronisation.
    *
    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
    * @param[in] channel    Timer channel
    */
   void setEventTime(Ticks eventTime, int channel) const {
      ftm->CONTROLS[channel].CnV = (unsigned)eventTime;
   }
   
   /**
    * Set Timer event time relative to current event time
    *
    * @param[in] offset     Event time in ticks relative to current event time (i.e. Timer channel CnV value)
    * @param[in] channel    Timer channel
    *
    * @note This value is write-buffered and updated by CnV synchronisation.
    */
   void setDeltaEventTime(Ticks offset, int channel) const {
      ftm->CONTROLS[channel].CnV = ftm->CONTROLS[channel].CnV + (unsigned)offset;
   }
   
   /**
    * Set Timer event time relative to current timer count value
    *
    * @param[in] offset     Event time in ticks relative to current time (i.e. Timer CNT value)
    * @param[in] channel    Timer channel
    *
    * @note This value is write-buffered and updated by CnV synchronisation.
    */
   void setRelativeEventTime(Ticks offset, int channel) const {
      ftm->CONTROLS[channel].CnV = ftm->CNT + (unsigned)offset;
   }
   
   /**
    * Set PWM high time in seconds
    *
    * @param[in] highTime   PWM high time in seconds
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    *
    * @note The actual CnV register update may be delayed by the FTM Register Synchronisation mechanism
    */
   ErrorCode setHighTime(Seconds highTime, int channel) const {
      return setHighTime(convertSecondsToTicks(highTime), channel);
   }
   
   /**
    * Set initial state for channels outputs
    *
    * @param initialValue  Bit mask value for channels
    */
   void setOutputInitialValue(uint32_t initialValue) const {
      ftm->OUTINIT = initialValue;
   }
   
   /**
    * Set output mask for channels outputs
    *
    * The mask of a channel determines if its output responds, that is,
    * it is masked or not, when a match occurs
    * This value is write-buffered and updated by PWM synchronisation.
    *
    * @param maskValue  Bit mask value 0 => not masked, 1 => masked
    */
   void setOutputMaskValue(uint32_t maskValue) const {
      ftm->OUTMASK = maskValue;
   }
   
   /**
    * Set inverting control
    *
    * This controls when the channel (n) and (n+1) outputs are exchanged.
    * Each bit enables the inverting operation for the corresponding channels pair.
    * This value is write-buffered and updated by INVCTRL synchronisation.
    *
    * @param enableMask  Bit mask for channels (combination of FtmChannelPair)
    */
   void setInvertedChannelPairs(uint32_t enableMask) const {
      ftm->INVCTRL = enableMask;
   }
   
   /**
    * Force channel outputs
    *
    * This enables software control of channel output and
    * defines the value forced to the channel output.
    * This value is write-buffered and updated by SWOCTRL synchronisation.
    *
    * @param enableMask  Bit mask for channels to be forced: 1 => forced, 0 => released
    * @param outputMask  Bit mask for values to be forced to selected channels
    */
   void forceChannelOutputs(uint32_t enableMask, uint32_t outputMask) const {
      ftm->SWOCTRL = (enableMask&0xFF)|((outputMask<<8)&0xFF00);
   }
   
   /**
    * Force channel output
    *
    * This enables software control of channel output and
    * defines the value forced to the channel output.
    * This value is write-buffered and updated by SWOCTRL synchronisation.
    *
    * @param channel  Number of channel to be forced
    * @param value    Value to be forced on that channel
    */
   void forceChannelOutput(uint32_t channel, bool value) const {
      static constexpr unsigned FTM_SWOCTRL_CHxOC_SHIFT   = 0;
      static constexpr unsigned FTM_SWOCTRL_CHxOCV_SHIFT  = 8;
   
      uint32_t channelMask = 1<<(channel+FTM_SWOCTRL_CHxOC_SHIFT);
      uint32_t valueMask   = 1<<(channel+FTM_SWOCTRL_CHxOCV_SHIFT);
   
      // Set control bit + insert control value
      ftm->SWOCTRL = (ftm->SWOCTRL&~valueMask) | (channelMask | (value?valueMask:0));
   }
   
   /**
    * Release forced channel output
    *
    * This enables software control of channel output and
    * defines the value forced to the channel output.
    * This value is write-buffered and updated by SWOCTRL synchronisation.
    *
    * @param channel  Number of channel to be released
    */
   void releaseChannelOutput(uint32_t channel) const {
      static constexpr unsigned FTM_SWOCTRL_CHxOC_SHIFT   = 0;
   
      uint32_t channelMask = 1<<(channel+FTM_SWOCTRL_CHxOC_SHIFT);
   
      // Release control bit
      ftm->SWOCTRL = ftm->SWOCTRL & ~channelMask;
   }
   
   /**
    * Set current value of channel outputs.

    * This value is overwritten by the next channel action.
    *
    * @param channelValueMask Mask indicating desired channel outputs
    */
   void setChanelOutputs(uint32_t channelValueMask) const {
      ftm->OUTINIT = channelValueMask;
      ftm->MODE    = ftm->MODE | FTM_MODE_INIT_MASK;
   }

};

class FtmChannel : public FtmBase {

private:
   FtmChannel(const FtmChannel&) = delete;
   FtmChannel(FtmChannel&&) = delete;

protected:
   // Empty constructor
   constexpr FtmChannel(uint32_t baseAddress, FtmChannelNum channelNum) :
   FtmBase(baseAddress),
   channelRegs((uint32_t)(ftm->CONTROLS+channelNum)),
   CHANNEL(channelNum),
   CHANNEL_MASK(1<<channelNum) {
   }
   ~FtmChannel() = default;

public:
   /** Allow access to FTM channel registers */
   const HardwarePtr<FtmBase::FtmChannelRegs> channelRegs;

   /** Timer channel number */
   const FtmChannelNum CHANNEL;

   /** Mask for Timer channel */
   const uint32_t CHANNEL_MASK;

   
      /**
       * Set Action on Channel Event
       * (/FTM0/ftm_cnsc_action_independent[0])
       *
       * @param ftmChannelAction Enable interrupt or DMA on channel event
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      void setAction(FtmChannelAction ftmChannelAction) const {
   
         ftm->CONTROLS[CHANNEL].CnSC =
              (ftm->CONTROLS[CHANNEL].CnSC & ~(FTM_CnSC_CHIE_MASK|FTM_CnSC_DMA_MASK)) | ftmChannelAction;
      }
   
   
      /**
       * Set Channel Mode and Action on Channel Event
       * (/FTM0/ftm_cnsc_mode_independent[0])
       *
       * @param ftmChannelMode   Determines channel operation (PWM/Input capture/Output compare)
       * @param ftmChannelAction Enable interrupt or DMA on channel event
   
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      void configure(
            FtmChannelMode   ftmChannelMode,
            FtmChannelAction ftmChannelAction) const {
   
         ftm->CONTROLS[CHANNEL].CnSC =
              (ftm->CONTROLS[CHANNEL].CnSC & ~(FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK|FTM_CnSC_CHIE_MASK|FTM_CnSC_DMA_MASK)) | ftmChannelMode|ftmChannelAction;
      }
   
      /**
       * Disables timer channel (sets mode to FtmChannelMode_Disabled)
       */
      void disable() const {
         setMode(FtmChannelMode_Disabled);
      }
   
      /**
       * Get channel mode.
       *
       * @return Current mode of operation for the channel
       */
       FtmChannelMode getMode() const {
         return FtmChannelMode(ftm->CONTROLS[CHANNEL].CnSC & (FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK));
      }
   
      /**
       * Set channel mode
       *
       * @param ftmChannelMode Determines channel operation (PWM/Input capture/Output compare)
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      void setMode(FtmChannelMode ftmChannelMode) const {
         ftm->CONTROLS[CHANNEL].CnSC =
               (ftm->CONTROLS[CHANNEL].CnSC & ~(FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK))|ftmChannelMode;
      }
   
      /**
       * Set polarity of channels.
       *
       * @param active Polarity to set
       */
      void setPolarity(Polarity active) const {
         if (active == ActiveHigh) {
            ftm->POL = ftm->POL & ~CHANNEL_MASK;
         }
         else {
            ftm->POL = ftm->POL | CHANNEL_MASK;
         }
      }

      /**
       * Set PWM high time in ticks.
       * Assumes value is less than period
       *
       * @param[in] highTime   PWM high time in ticks
       *
       * @return E_NO_ERROR on success
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
       ErrorCode setHighTime(Ticks highTime) const {
         return FtmBase::setHighTime(highTime, CHANNEL);
      }
   
      /**
       * Set PWM high time in seconds.
       * Higher precision float version
       *
       * @param[in] highTime   PWM high time in seconds
       *
       * @return E_NO_ERROR on success
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
       ErrorCode setHighTime(Seconds highTime) const {
         return FtmBase::setHighTime(highTime, CHANNEL);
      }
   
      /**
       * Set PWM duty cycle.
       *
       * @param[in] dutyCycle  Duty-cycle as percentage
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      void setDutyCycle(int dutyCycle) const {
         FtmBase::setDutyCycle(dutyCycle, CHANNEL);
      }
   
      /**
       * Set PWM duty cycle
       *
       * @param[in] dutyCycle  Duty-cycle as percentage
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      void setDutyCycle(float dutyCycle) const {
         FtmBase::setDutyCycle(dutyCycle, CHANNEL);
      }
   
      /**
       * Set Timer event time.
       *
       * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      void setDeltaEventTime(Ticks offset) const {
         FtmBase::setDeltaEventTime(offset, CHANNEL);
      }
   
      /**
       * Set Timer event time relative to current timer count value.
       *
       * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      void setRelativeEventTime(Ticks offset) const {
         FtmBase::setRelativeEventTime(offset, CHANNEL);
      }
   
      /**
       * Set Absolute Timer event time.
       *
       * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      void setEventTime(Ticks eventTime) const {
         FtmBase::setEventTime(eventTime, CHANNEL);
      }
   
      /**
       * Get Absolute Timer event time.
       *
       * @return Absolute time of last event in ticks i.e. value from timer event register
       */
       Ticks getEventTime() const {
         return FtmBase::getEventTime(CHANNEL);
      }
   
      /**
       * Get Timer interrupt/event flag.
       *
       * @return true  Indicates an event has occurred on a channel
       * @return false Indicates no event has occurred on a channel since last polled
       */
       bool getInterruptFlag() const {
         return (ftm->CONTROLS[CHANNEL].CnSC&FTM_CnSC_CHF_MASK) != 0;
      }
   
      /**
       * Get and Clear Timer channel interrupt flag.
       *
       * @return true  Indicates an event has occurred on a channel
       * @return false Indicates no event has occurred on a channel since last polled
       *
       * @note Only flags captured in the return value are cleared
       */
       bool getAndClearInterruptFlag() const {
         // Note - requires read and write zero to clear flags
         uint8_t cnsc = ftm->CONTROLS[CHANNEL].CnSC;
         ftm->CONTROLS[CHANNEL].CnSC = cnsc&~CHANNEL_MASK;
         return (cnsc&CHANNEL_MASK) != 0;
      }
   
      /**
       * Clear interrupt flag on channel.
       */
      void clearInterruptFlag() const {
         // Note - requires read and write zero to clear flag
         ftm->CONTROLS[CHANNEL].CnSC = ftm->CONTROLS[CHANNEL].CnSC & ~FTM_CnSC_CHF_MASK;
      }
   
      /**
       * Force channel output.
       *
       * This enables software control of channel output and
       * defines the value forced to the channel output.
       * This value is write-buffered and updated by SWOCTRL synchronisation.
       *
       * @param ftmChannelForce  Select control of pin. One of FtmChannelForce_Low/High/Release
       */
      void forceChannelOutput(FtmChannelForce ftmChannelForce) const {
         static const uint32_t MASK = ((1<<CHANNEL)|(1<<(CHANNEL+8)));
         ftm->SWOCTRL = ((ftm->SWOCTRL & ~MASK)) | (ftmChannelForce & MASK);
      }


};

/**
 * Base class representing a FTM.
 *
 *
 * @tparam Info  Class describing FTM hardware instance
 */
template<class Info>
class FtmBase_T : public FtmBase, public Info  {

private:
   /**
    * This class is not intended to be instantiated
    */
   FtmBase_T(const FtmBase_T&) = delete;
   FtmBase_T(FtmBase_T&&) = delete;

#if false // /FTM/irqHandlingMethod
   typedef typename Info::ChannelCallbackFunction ChannelCallbackFunction;
#endif

public:

   // Empty constructor
   constexpr FtmBase_T() : FtmBase(Info::baseAddress) {}
   virtual ~FtmBase_T() = default;

   /** Maximum counter value in ticks */
   static constexpr Ticks MaximumPeriodInTicks = Ticks(FTM_MOD_MOD_MASK);

   /** Hardware instance pointer */
   static constexpr HardwarePtr<FTM_Type> ftm = Info::baseAddress;

   /** @return Base address of FTM hardware as uint32_t */
   static constexpr uint32_t ftmBase() { return Info::baseAddress; }
   /** @return Base address of FTM.SC register as uint32_t */
   static constexpr uint32_t ftmSC() { return ftmBase() + offsetof(FTM_Type, SC); }
   /** @return Base address of FTM.CNT register as uint32_t */
   static constexpr uint32_t ftmCNT() { return ftmBase() + offsetof(FTM_Type, CNT); }
   /** @return Base address of FTM.MOD register as uint32_t */
   static constexpr uint32_t ftmMOD() { return ftmBase() + offsetof(FTM_Type, MOD); }
   /** @return Base address of FTM.CONTROL[n] struct as uint32_t */
   static constexpr uint32_t ftmCONTROL(int index) { return ftmBase() + offsetof(FTM_Type, CONTROLS) + index*sizeof(FTM_Type::CONTROLS[0]); }
   /** @return Base address of FTM.CONTROL[n].CnSC struct as uint32_t */
   static constexpr uint32_t ftmCnSC(int index) { return ftmBase() + offsetof(FTM_Type, CONTROLS) + index*sizeof(FTM_Type::CONTROLS[0])+0; }
   /** @return Base address of FTM.CONTROL[n].CnV struct as uint32_t */
   static constexpr uint32_t ftmCnV(int index) { return ftmBase() + offsetof(FTM_Type, CONTROLS) + index*sizeof(FTM_Type::CONTROLS[0])+sizeof(uint32_t); }

private:
   /** Number of channels mapped to a channel event vector */
   static constexpr unsigned ChannelVectorRatio = Info::NumChannels/Info::NumChannelVectors;

protected:
   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   virtual float getInputClockFrequencyVirtual(FtmClockSource ftmClockSource) const override {
      return Info::getInputClockFrequency(ftmClockSource);
   }

public:

#if false // /FTM/irqHandlingMethod
   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match ChannelCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Ftm0::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Ftm0::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint8_t), T &object>
   static ChannelCallbackFunction wrapCallback() {
      static ChannelCallbackFunction fn = [](uint8_t status) {
         (object.*callback)(status);
      };
      return fn;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match ChannelCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Ftm0::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Ftm0::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint8_t)>
   static ChannelCallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static ChannelCallbackFunction fn = [](uint8_t status) {
         (obj.*callback)(status);
      };
      return fn;
   }
#endif // /FTM/irqHandlingMethod

public:
   // Make visible
   using Info::configure;

// No class Info found
// /FTM/InitMethod not found
// /FTM/ChannelInitMethod not found
// /FTM/FaultInitMethod not found

/*
 *   // Static functions (mirrored)
 */
   /**
    * Enables clock to peripheral and configures all pins.
    * Configures main operating settings for timer.
    *
    * @param ftmCountMode   Counting Mode
    * @param ftmClockSource Selects the clock source for the module
    * @param ftmPrescale    Selects the prescaler for the module
    */
   static void configure(
         FtmCountMode   ftmCountMode,
         FtmClockSource ftmClockSource,
         FtmPrescale    ftmPrescale    = FtmPrescale_DivBy1) {
   
      // Enable clock to peripheral
      Info::enable();
   
      // Disable timer to change settings
      ftm->SC = 0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = ftmCountMode|ftmClockSource|ftmPrescale;
   }

   /**
    * Stop timer counter.
    * This simply disables the counter clock source. 

    * To restart use setClockSource() or configure();
    *
    * @note This function will affect all channels of the timer.
    * @note A illegal access trap will occur if the timer has not been enabled
    */
   static void stopCounter() {
     ftm->SC = (ftm->SC&~FTM_SC_CLKS_MASK);
   }
   
   /**
    * Set Clock Source and Counter clock prescaler
    *
    * @param ftmClockSource Selects the clock source for the module
    * @param ftmPrescale    Selects the prescaler for the module
    */
   static void selectClock(
         FtmClockSource ftmClockSource,
         FtmPrescale    ftmPrescale) {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~(FTM_SC_CLKS_MASK|FTM_SC_PS_MASK))|(ftmClockSource|ftmPrescale);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }

   /**
    * Set Counting mode
    *
    * @param ftmCountMode Counting Mode
    *
    * @note This function will affect all channels of the timer.
    * @note The timer will be disabled while making changes.
    */
   static void setCountMode(FtmCountMode ftmCountMode) {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~FTM_SC_CPWMS_MASK)|(ftmCountMode);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }
   
   /**
    * Get Counting mode
    *
    * @param ftmCountMode Counting Mode
    */
   static FtmCountMode getCountMode() {
   
      return (FtmCountMode)(ftm->SC&~FTM_SC_CPWMS_MASK);
   }

   /**
    * Set Clock Source
    *
    * @param ftmClockSource Selects the clock source for the module
    *
    * @note This function will affect all channels of the timer.
    * @note The timer will be disabled while making changes.
    */
   static void setClockSource(FtmClockSource ftmClockSource) {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~FTM_SC_CLKS_MASK)|(ftmClockSource);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }
   
   /**
    * Get Clock Source
    *
    * @param ftmClockSource Selects the clock source for the module
    */
   static FtmClockSource getClockSource() {
   
      return (FtmClockSource)(ftm->SC&~FTM_SC_CLKS_MASK);
   }

   /**
    * Set Counter clock prescaler
    *
    * @param ftmPrescale Selects the prescaler for the module
    *
    * @note This function will affect all channels of the timer.
    * @note The timer will be disabled while making changes.
    */
   static void setPrescaler(FtmPrescale ftmPrescale) {
   
      // Calculate new SC value
      uint32_t sc = (ftm->SC&~FTM_SC_PS_MASK)|(ftmPrescale);
   
      // Disable timer to change clock (unable to switch directly between clock sources)
      ftm->SC=0;
   
      // Make sure write has completed (disabled)
      (void)(ftm->SC);
   
      // Write new value
      ftm->SC = sc;
   }
   
   /**
    * Get Counter clock prescaler
    *
    * @param ftmPrescale Selects the prescaler for the module
    */
   static FtmPrescale getPrescaler() {
   
      return (FtmPrescale)(ftm->SC&~FTM_SC_PS_MASK);
   }

   /**
    * Set End value for counter
    * This value is write-buffered and updated by CNTIN synchronisation
    *
    * @param ticks The timer counts from 0 to this value
    *
    * @note This function will affect all channels of the timer.
    */
   static void setCounterMaximumValue(const Ticks& ticks) {
   
      // Write new value
      ftm->MOD = ticks;
   }
   
   /**
    * Get End value for counter
    *
    * @param ticks The timer counts from 0 to this value
    */
   static Ticks getCounterMaximumValue() {
   
      return Ticks(ftm->MOD);
   }

   /**
    * Set period
    *
    * @param[in] period   Period in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note The counter load value (CNTIN) is cleared
    * @note The counter modulo value (MOD) is modified to obtain the requested period
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   static ErrorCode setPeriod(Seconds period) {
   
      uint16_t modValue = 0;
   
      uint8_t sc = ftm->SC;
   
      float inputClock = Info::getInputClockFrequency((FtmClockSource)(sc&FTM_SC_CLKS_MASK));
      ErrorCode rc = FtmCommonInfo::calculateTimingParameters(inputClock, period, sc, modValue);
      if (rc != E_NO_ERROR) {
         return rc;
      }
      // Disable timer to change prescaler and period
      ftm->SC  = 0;
   
      // Configure for modulo operation
      ftm->MOD = modValue;
   
      // Clear counter
      ftm->CNT = 0;
   
      // Set prescale and enable timer
      ftm->SC  = sc;
   
      return E_NO_ERROR;
   }
   
   /**
    * Set maximum interval for input-capture or output compare.
    * Input Capture and Output Compare will be able to operate over
    * at least this period without overflow.
    *
    * @param[in] interval Interval in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note Counter is configured for free-running mode i.e. 0-65535
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   static ErrorCode setMaximumInterval(Seconds interval) {
   
      uint16_t       modValue;
   
      uint8_t sc = ftm->SC;
   
      float inputClock = Info::getInputClockFrequency((FtmClockSource)(sc&FTM_SC_CLKS_MASK));
      ErrorCode rc = FtmCommonInfo::calculateTimingParameters(inputClock, interval, sc, modValue);
      if (rc != E_NO_ERROR) {
         return rc;
      }
   
      // Disable timer to change prescaler and period
      ftm->SC  = 0;
   
      // Configure for free-running mode
      // This is the usual value for IC or OC set-up
      ftm->MOD = 0_ticks;
   
      // Clear counter
      ftm->CNT = 0;
   
      // Set prescale and enable timer
      ftm->SC  = sc;
   
      return E_NO_ERROR;
   }

   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   static float getTickFrequencyAsFloat() {
   
      // Calculate timer prescale factor
      float prescaleFactor = 1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);
   
      return Info::getInputClockFrequency((FtmClockSource)(ftm->SC&FTM_SC_CLKS_MASK))/prescaleFactor;
   }
   
   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getTickFrequencyAsInt() {
   
      // Calculate timer prescale factor
      int prescaleFactor = 1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);
   
      return Info::getInputClockFrequency((FtmClockSource)(ftm->SC&FTM_SC_CLKS_MASK))/prescaleFactor;
   }

   /**
    * Convert time in microseconds to time in ticks
    *
    * @param[in] time Time in microseconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    * @note Will set error code if calculated value is less the Timer minimum resolution
    */
   static Ticks convertMicrosecondsToTicks(int time) {
   
      // Calculate period
      uint32_t tickRate = getTickFrequencyAsInt();
      uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if constexpr (Info::minimumInterval>0) {
         if (rv < Info::minimumInterval) {
            // Attempt to set too short a period
            setErrorCode(E_TOO_SMALL);
         }
      }
      return Ticks(uint32_t(rv));
   }
   
   /**
    * Converts time in seconds to time in ticks
    *
    * @param[in] seconds Time interval in seconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). 

    * @note Will set error code if calculated value is less the minimum resolution
    */
   static Ticks convertSecondsToTicks(Seconds seconds) {
   
      // Calculate period
      float    tickRate = getTickFrequencyAsFloat();
      uint64_t rv       = rintf((float)seconds*tickRate);
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv < Info::minimumInterval) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
      return Ticks(uint32_t(rv));
   }
   
   /**
    * Convert time in ticks to time in microseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in microseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   static uint32_t convertTicksToMicroseconds(Ticks timeInTicks) {
   
      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }
   
   /**
    * Convert time in ticks to time in milliseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in milliseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   static uint32_t convertTicksToMilliseconds(Ticks timeInTicks) {
   
      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }
   
   /**
    * Convert time in ticks to time in seconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in seconds
    */
   static Seconds convertTicksToSeconds(Ticks timeInTicks) {
      return static_cast<float>((unsigned)timeInTicks)/getTickFrequencyAsFloat();
   }
   /**
    * Get Timer count
    *
    * @return Timer count value
    */
   static uint16_t getTime() {
      return ftm->CNT;
   }
   
   /**
    * Reset counter to initial value
    */
   static void resetTime() {
      // Note: writing ANY value loads CNT from CNTIN
      ftm->CNT = 0;
   }
   
   /**
    * Get timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    */
   static unsigned getInterruptFlags() {
      return ftm->STATUS;
   }
   
   /**
    * Clear selected timer event flags
    *
    * @param channelMask Mask indicating which channel flags to clear
    *                    There is one bit for each channel
    *
    * @note Flags will not be cleared if the channel is configured for DMA
    */
   static void clearSelectedInterruptFlags(uint32_t channelMask) {
      (void)ftm->STATUS;
      ftm->STATUS = ~channelMask;
   }
   
   /**
    * Clear timer overflow event flag
    */
   static void clearOverflowInterruptFlag() {
      // Clear TOI flag (read & w0c)
      ftm->SC = ftm->SC & ~FTM_SC_TOF_MASK;
   }
   
   /**
    * Get and clear timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    *
    * @note Only flags captured in the return value are cleared
    * @note Flags will not be cleared if the channel is configured for DMA
    */
   static unsigned getAndClearInterruptFlags() {
      // Note requires read and write zero to clear flags
      // so only flags captured in status are cleared
      unsigned status = ftm->STATUS;
      ftm->STATUS = ~status;
      return status;
   }
   
   /**
    * Enable Timer Overflow interrupts
    */
   static void enableTimerOverflowInterrupts() {
      ftm->SC = ftm->SC | FTM_SC_TOIE_MASK;
   }
   
   /**
    * Disable Timer Overflow interrupts
    */
   static void disableTimerOverflowInterrupts() {
      ftm->SC = ftm->SC & ~FTM_SC_TOIE_MASK;
   }
   
   /*
    * *****************************************************************
    *          Channel functions
    * *****************************************************************
    */
   
   /**
    * Set action on event
    * (/FTM0/ftm_cnsc_action_independent[0])
    *
    * @param ftmChannelAction Enable interrupt or DMA on channel event
    * @param ftmChannelNum    Selects a channel
    */
   static void setAction(
         FtmChannelAction ftmChannelAction,
         FtmChannelNum    ftmChannelNum)  {
   
      ftm->CONTROLS[ftmChannelNum].CnSC =
         (ftm->CONTROLS[ftmChannelNum].CnSC&~(FTM_CnSC_CHIE_MASK|FTM_CnSC_DMA_MASK)) | ftmChannelAction;
   }
   
   /**
    * Set PWM duty cycle.
    * Higher precision float version
    *
    * @param[in] dutyCycle  Duty-cycle as percentage (float)
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
    */
   static void setDutyCycle(float dutyCycle, int channel) {
      if (ftm->SC&FTM_SC_CPWMS_MASK) {
         ftm->CONTROLS[channel].CnV  = round((dutyCycle*ftm->MOD)/100.0f);
      }
      else {
         ftm->CONTROLS[channel].CnV  = round((dutyCycle*(ftm->MOD+1))/100.0f);
      }
   }
   
   /**
    * Set PWM duty cycle
    *
    * @param[in] dutyCycle  Duty-cycle as percentage
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
    */
   static void setDutyCycle(int dutyCycle, int channel) {
      if (ftm->SC&FTM_SC_CPWMS_MASK) {
         ftm->CONTROLS[channel].CnV  = (dutyCycle*ftm->MOD)/100;
      }
      else {
         ftm->CONTROLS[channel].CnV  = (dutyCycle*(ftm->MOD+1))/100;
      }
   }
   
   /**
    * Set PWM high time in ticks
    * Assumes value is less than period
    *
    * @param[in] highTime   PWM high time in ticks
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    * @return E_TOO_LARGE on success
    *
    * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
    */
   static ErrorCode setHighTime(Ticks highTime, int channel) {
   
      if (ftm->SC&FTM_SC_CPWMS_MASK) {
         // In CPWM the pulse width is doubled
         highTime = Ticks((highTime+1_ticks)/2U);
      }
#ifdef DEBUG_BUILD
      if ((unsigned)highTime > ftm->MOD) {
         return setErrorCode(E_TOO_LARGE);
      }
#endif
      ftm->CONTROLS[channel].CnV  = (unsigned)highTime;
      return E_NO_ERROR;
   }
   
   /**
    * Get Timer event time
    *
    * @param[in] channel    Timer channel
    *
    * @return Absolute time of last event in ticks i.e. value from timer event register
    */
   static Ticks getEventTime(int channel) {
      return Ticks(ftm->CONTROLS[channel].CnV);
   }
   
   /**
    * Set Timer event time
    *
    * This value is write-buffered and updated by Cnv synchronisation.
    *
    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
    * @param[in] channel    Timer channel
    */
   static void setEventTime(Ticks eventTime, int channel) {
      ftm->CONTROLS[channel].CnV = (unsigned)eventTime;
   }
   
   /**
    * Set Timer event time relative to current event time
    *
    * @param[in] offset     Event time in ticks relative to current event time (i.e. Timer channel CnV value)
    * @param[in] channel    Timer channel
    *
    * @note This value is write-buffered and updated by CnV synchronisation.
    */
   static void setDeltaEventTime(Ticks offset, int channel) {
      ftm->CONTROLS[channel].CnV = ftm->CONTROLS[channel].CnV + (unsigned)offset;
   }
   
   /**
    * Set Timer event time relative to current timer count value
    *
    * @param[in] offset     Event time in ticks relative to current time (i.e. Timer CNT value)
    * @param[in] channel    Timer channel
    *
    * @note This value is write-buffered and updated by CnV synchronisation.
    */
   static void setRelativeEventTime(Ticks offset, int channel) {
      ftm->CONTROLS[channel].CnV = ftm->CNT + (unsigned)offset;
   }
   
   /**
    * Set PWM high time in seconds
    *
    * @param[in] highTime   PWM high time in seconds
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    *
    * @note The actual CnV register update may be delayed by the FTM Register Synchronisation mechanism
    */
   static ErrorCode setHighTime(Seconds highTime, int channel) {
      return setHighTime(convertSecondsToTicks(highTime), channel);
   }
   
   /**
    * Set initial state for channels outputs
    *
    * @param initialValue  Bit mask value for channels
    */
   static void setOutputInitialValue(uint32_t initialValue) {
      ftm->OUTINIT = initialValue;
   }
   
   /**
    * Set output mask for channels outputs
    *
    * The mask of a channel determines if its output responds, that is,
    * it is masked or not, when a match occurs
    * This value is write-buffered and updated by PWM synchronisation.
    *
    * @param maskValue  Bit mask value 0 => not masked, 1 => masked
    */
   static void setOutputMaskValue(uint32_t maskValue) {
      ftm->OUTMASK = maskValue;
   }
   
   /**
    * Set inverting control
    *
    * This controls when the channel (n) and (n+1) outputs are exchanged.
    * Each bit enables the inverting operation for the corresponding channels pair.
    * This value is write-buffered and updated by INVCTRL synchronisation.
    *
    * @param enableMask  Bit mask for channels (combination of FtmChannelPair)
    */
   static void setInvertedChannelPairs(uint32_t enableMask) {
      ftm->INVCTRL = enableMask;
   }
   
   /**
    * Force channel outputs
    *
    * This enables software control of channel output and
    * defines the value forced to the channel output.
    * This value is write-buffered and updated by SWOCTRL synchronisation.
    *
    * @param enableMask  Bit mask for channels to be forced: 1 => forced, 0 => released
    * @param outputMask  Bit mask for values to be forced to selected channels
    */
   static void forceChannelOutputs(uint32_t enableMask, uint32_t outputMask) {
      ftm->SWOCTRL = (enableMask&0xFF)|((outputMask<<8)&0xFF00);
   }
   
   /**
    * Force channel output
    *
    * This enables software control of channel output and
    * defines the value forced to the channel output.
    * This value is write-buffered and updated by SWOCTRL synchronisation.
    *
    * @param channel  Number of channel to be forced
    * @param value    Value to be forced on that channel
    */
   static void forceChannelOutput(uint32_t channel, bool value) {
      static constexpr unsigned FTM_SWOCTRL_CHxOC_SHIFT   = 0;
      static constexpr unsigned FTM_SWOCTRL_CHxOCV_SHIFT  = 8;
   
      uint32_t channelMask = 1<<(channel+FTM_SWOCTRL_CHxOC_SHIFT);
      uint32_t valueMask   = 1<<(channel+FTM_SWOCTRL_CHxOCV_SHIFT);
   
      // Set control bit + insert control value
      ftm->SWOCTRL = (ftm->SWOCTRL&~valueMask) | (channelMask | (value?valueMask:0));
   }
   
   /**
    * Release forced channel output
    *
    * This enables software control of channel output and
    * defines the value forced to the channel output.
    * This value is write-buffered and updated by SWOCTRL synchronisation.
    *
    * @param channel  Number of channel to be released
    */
   static void releaseChannelOutput(uint32_t channel) {
      static constexpr unsigned FTM_SWOCTRL_CHxOC_SHIFT   = 0;
   
      uint32_t channelMask = 1<<(channel+FTM_SWOCTRL_CHxOC_SHIFT);
   
      // Release control bit
      ftm->SWOCTRL = ftm->SWOCTRL & ~channelMask;
   }
   
   /**
    * Set current value of channel outputs.

    * This value is overwritten by the next channel action.
    *
    * @param channelValueMask Mask indicating desired channel outputs
    */
   static void setChanelOutputs(uint32_t channelValueMask) {
      ftm->OUTINIT = channelValueMask;
      ftm->MODE    = ftm->MODE | FTM_MODE_INIT_MASK;
   }


public:
   /**
    * Template class representing a timer channel
    *
    * Example
    * @code
    * // Instantiate the timer and channel being used (for FTM0 & channel 6)
    * using Tmr      = USBDM::Ftm0;
    * using Tmr0_ch6 = Tmr::Channel<6>;
    *
    * // Enable and initialise timer with initial alignment
    * Tmr::configure(FtmAlignment_LeftAlign);
    *
    * // Change timer period (in ticks) (affects ALL channels of timer)
    * Tmr::setPeriod(500);
    *
    * // Configure channel as PWM
    * Tmr0_ch6::configure(FtmChannelMode_PwmHighTruePulses);
    *
    * // Change duty cycle (in percent)
    * Tmr0_ch6.setDutyCycle(45);
    * @endcode
    *
    * @tparam channel FTM timer channel
    */
   template <int channel>
   class Channel :
#if true // /PCR/_present
   public PcrTable_T<Info, limitIndex<Info>(channel)>,
#endif
   public FtmChannel, public Info {

   private:
#if true // /PCR/_present
      FtmBase::CheckPinExistsAndIsMapped<Info, channel> check;
#endif

      /**
       * This class is not intended to be instantiated
       */
      Channel(const Channel&) = delete;
      Channel(Channel&&) = delete;

   public:
//      typedef typename Info::ChannelInit ChannelInit;

      constexpr Channel() : FtmChannel(Info::baseAddress, (FtmChannelNum)channel) {}
      virtual ~Channel() = default;

   protected:
      /**
       * Get frequency of timer tick
       *
       * @return Timer frequency in Hz
       */
      virtual float getInputClockFrequencyVirtual(FtmClockSource ftmClockSource) const override {
         return Info::getInputClockFrequency(ftmClockSource);
      }

   public:
#if true // /PCR/_present
      // GPIO associated with this channel
      template<Polarity polarity>
      using Gpio = GpioTable_T<Info, limitIndex<Info>(channel), polarity>; // Inactive is high

      /** Allow access to PCR of associated pin */
      using Pcr = PcrTable_T<Info, limitIndex<Info>(channel)>;
#endif

      /** Allow access owning FTM */
      using OwningFtm = FtmBase_T<Info>;

      /** Allow access to FTM hardware */
      static constexpr HardwarePtr<FTM_Type> ftm = Info::baseAddress;

      /** @return Base address of FTM.CONTROL struct as uint32_t */
      static constexpr uint32_t ftmCONTROL() { return ftmBase() + offsetof(FTM_Type, CONTROLS[channel]); }

      /** @return Address of FTM.CONTROL.CnSC as uint32_t */
      static constexpr uint32_t ftmCnSC() { return ftmCONTROL()+0; }

      /** @return Address of FTM.CONTROL.CnV as uint32_t */
      static constexpr uint32_t ftmCnV() { return ftmCONTROL()+sizeof(uint32_t); }

      /**
       * Structure for FTM channel.
       */
      struct FtmChannelRegs {
         __IO uint32_t  CnSC; /**< 000C: Channel  Status and Control */
         __IO uint32_t  CnV;  /**< 0010: Channel  Value              */
      };

      /**
       * Allows access to FTM channel registers.
       *
       * @return Reference to the FTM channel registers
       */
      static __attribute__((always_inline)) volatile FtmChannelRegs &channelRegs() {
         return *reinterpret_cast<FtmChannelRegs *>(&OwningFtm::ftm->CONTROLS[CHANNEL]);
      }

      /** Timer channel number */
      static constexpr FtmChannelNum CHANNEL = (FtmChannelNum) channel;

      /** Mask for Timer channel */
      static constexpr uint32_t CHANNEL_MASK = 1<<channel;

      /**
       * Configure channel and sets mode.
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void defaultConfigure() {
         Info::configure(OwningFtm::DefaultChannelInitValues[channel]);
      }

      /**
       * Configure channel from Init data
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       *
       * @param channelInit (channel number is ignored)
       */
      static void configure(const typename Info::ChannelInit &channelInit) {
         Info::configure(FtmChannelNum(channel), channelInit);
      }
      
   
      /**
       * Set Action on Channel Event
       * (/FTM0/ftm_cnsc_action_independent[0])
       *
       * @param ftmChannelAction Enable interrupt or DMA on channel event
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void setAction(FtmChannelAction ftmChannelAction) {
   
         ftm->CONTROLS[channel].CnSC =
              (ftm->CONTROLS[channel].CnSC & ~(FTM_CnSC_CHIE_MASK|FTM_CnSC_DMA_MASK)) | ftmChannelAction;
      }
   
   
      /**
       * Set Channel Mode and Action on Channel Event
       * (/FTM0/ftm_cnsc_mode_independent[0])
       *
       * @param ftmChannelMode   Determines channel operation (PWM/Input capture/Output compare)
       * @param ftmChannelAction Enable interrupt or DMA on channel event
   
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void configure(
            FtmChannelMode   ftmChannelMode,
            FtmChannelAction ftmChannelAction) {
   
         ftm->CONTROLS[channel].CnSC =
              (ftm->CONTROLS[channel].CnSC & ~(FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK|FTM_CnSC_CHIE_MASK|FTM_CnSC_DMA_MASK)) | ftmChannelMode|ftmChannelAction;
      }
   
      /**
       * Disables timer channel (sets mode to FtmChannelMode_Disabled)
       */
      static void disable() {
         setMode(FtmChannelMode_Disabled);
      }
   
      /**
       * Get channel mode.
       *
       * @return Current mode of operation for the channel
       */
      static  FtmChannelMode getMode() {
         return FtmChannelMode(ftm->CONTROLS[channel].CnSC & (FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK));
      }
   
      /**
       * Set channel mode
       *
       * @param ftmChannelMode Determines channel operation (PWM/Input capture/Output compare)
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void setMode(FtmChannelMode ftmChannelMode) {
         ftm->CONTROLS[channel].CnSC =
               (ftm->CONTROLS[channel].CnSC & ~(FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK))|ftmChannelMode;
      }
   
      /**
       * Set polarity of channels.
       *
       * @param active Polarity to set
       */
      static void setPolarity(Polarity active) {
         if (active == ActiveHigh) {
            ftm->POL = ftm->POL & ~CHANNEL_MASK;
         }
         else {
            ftm->POL = ftm->POL | CHANNEL_MASK;
         }
      }

      /**
       * Set PWM high time in ticks.
       * Assumes value is less than period
       *
       * @param[in] highTime   PWM high time in ticks
       *
       * @return E_NO_ERROR on success
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static  ErrorCode setHighTime(Ticks highTime) {
         return OwningFtm::setHighTime(highTime, channel);
      }
   
      /**
       * Set PWM high time in seconds.
       * Higher precision float version
       *
       * @param[in] highTime   PWM high time in seconds
       *
       * @return E_NO_ERROR on success
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static  ErrorCode setHighTime(Seconds highTime) {
         return OwningFtm::setHighTime(highTime, channel);
      }
   
      /**
       * Set PWM duty cycle.
       *
       * @param[in] dutyCycle  Duty-cycle as percentage
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static void setDutyCycle(int dutyCycle) {
         OwningFtm::setDutyCycle(dutyCycle, channel);
      }
   
      /**
       * Set PWM duty cycle
       *
       * @param[in] dutyCycle  Duty-cycle as percentage
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static void setDutyCycle(float dutyCycle) {
         OwningFtm::setDutyCycle(dutyCycle, channel);
      }
   
      /**
       * Set Timer event time.
       *
       * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static void setDeltaEventTime(Ticks offset) {
         OwningFtm::setDeltaEventTime(offset, channel);
      }
   
      /**
       * Set Timer event time relative to current timer count value.
       *
       * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static void setRelativeEventTime(Ticks offset) {
         OwningFtm::setRelativeEventTime(offset, channel);
      }
   
      /**
       * Set Absolute Timer event time.
       *
       * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
       *
       * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
       */
      static void setEventTime(Ticks eventTime) {
         OwningFtm::setEventTime(eventTime, channel);
      }
   
      /**
       * Get Absolute Timer event time.
       *
       * @return Absolute time of last event in ticks i.e. value from timer event register
       */
      static  Ticks getEventTime() {
         return OwningFtm::getEventTime(channel);
      }
   
      /**
       * Get Timer interrupt/event flag.
       *
       * @return true  Indicates an event has occurred on a channel
       * @return false Indicates no event has occurred on a channel since last polled
       */
      static  bool getInterruptFlag() {
         return (ftm->CONTROLS[channel].CnSC&FTM_CnSC_CHF_MASK) != 0;
      }
   
      /**
       * Get and Clear Timer channel interrupt flag.
       *
       * @return true  Indicates an event has occurred on a channel
       * @return false Indicates no event has occurred on a channel since last polled
       *
       * @note Only flags captured in the return value are cleared
       */
      static  bool getAndClearInterruptFlag() {
         // Note - requires read and write zero to clear flags
         uint8_t cnsc = ftm->CONTROLS[channel].CnSC;
         ftm->CONTROLS[channel].CnSC = cnsc&~CHANNEL_MASK;
         return (cnsc&CHANNEL_MASK) != 0;
      }
   
      /**
       * Clear interrupt flag on channel.
       */
      static void clearInterruptFlag() {
         // Note - requires read and write zero to clear flag
         ftm->CONTROLS[CHANNEL].CnSC = ftm->CONTROLS[CHANNEL].CnSC & ~FTM_CnSC_CHF_MASK;
      }
   
      /**
       * Force channel output.
       *
       * This enables software control of channel output and
       * defines the value forced to the channel output.
       * This value is write-buffered and updated by SWOCTRL synchronisation.
       *
       * @param ftmChannelForce  Select control of pin. One of FtmChannelForce_Low/High/Release
       */
      static void forceChannelOutput(FtmChannelForce ftmChannelForce) {
         static const uint32_t MASK = ((1<<channel)|(1<<(channel+8)));
         ftm->SWOCTRL = ((ftm->SWOCTRL & ~MASK)) | (ftmChannelForce & MASK);
      }


#if false // /FTM/irqHandlingMethod
   /**
    * Set channel event callback function
    *
    * @param[in] callback Callback function to execute on channel event interrupt.
    *                     Use nullptr to remove callback.
    *
    * @return E_NO_ERROR            No error
    * @return E_HANDLER_ALREADY_SET Handler already set
    *
    * @note Channel callbacks may be shared by multiple channels of the timer.\n
    *       It is necessary to identify the originating channel in the callback
    */
   static ErrorCode setChannelCallback(ChannelCallbackFunction callback) {
      if constexpr (Info::individualChannelCallbacks) {
         return OwningFtm::setChannelCallback(channel, callback);
      }
      else {
         return OwningFtm::setChannelCallback(callback);
      }
   }
#endif // /FTM/irqHandlingMethod
#if true // /PCR/_present
   /*******************************
    *  PIN Functions
    *******************************/
   /**
    * Set callback for Pin IRQ.
    *
    * @param[in] callback The function to call on Pin interrupt.
    *                     nullptr to indicate none
    *
    * @note There is a single callback function for all pins on the related port.
    */
   static __attribute__((always_inline)) void setPinCallback(PinCallbackFunction callback) {
      FtmBase::CheckPinExistsAndIsMapped<Info, channel> check;
      static_assert(Pcr::HANDLER_INSTALLED, "Gpio associated with FTM channel not configured for PIN interrupts - Modify Configure.usbdm");
      Pcr::setPinCallback(callback);
   }

#if defined(PORT_PCR_ODE_MASK) and defined (PORT_PCR_SRE_MASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinDriveMode     One of PinDriveMode_PushPull, PinDriveMode_OpenDrain
    * @param[in] pinSlewRate      One of PinSlewRate_Slow, PinSlewRate_Fast
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinDriveMode      pinDriveMode      = Pcr::defaultPcrValue,
         PinSlewRate       pinSlewRate       = Pcr::defaultPcrValue) {

      FtmBase::CheckPinExistsAndIsMapped<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinDriveMode|pinSlewRate);
   }
#elif defined(PORT_PCR_ODE_ASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinDriveMode     One of PinDriveMode_PushPull, PinDriveMode_OpenDrain
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinDriveMode      pinDriveMode      = Pcr::defaultPcrValue) {

      FtmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinDriveMode);
   }
#elif defined(PORT_PCR_SRE_MASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinSlewRate      One of PinSlewRate_Slow, PinSlewRate_Fast
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinSlewRate       pinSlewRate       = Pcr::defaultPcrValue) {

      FtmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinSlewRate);
   }
#else
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue) {

      FtmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif

      Pcr::setPCR(pinDriveStrength);
   }
#endif

      /**
       * @brief
       * Set subset of Pin Control Register Attributes associated with input direction \n
       * Mux value is set appropriately for the pin function being used. Other attributes are cleared.\n
       * The clock to the port will be enabled before changing the PCR.
       *
       * @param[in] pinPull          One of PinPull_None, PinPull_Up, PinPull_Down
       * @param[in] pinAction        One of PinAction_None, etc
       * @param[in] pinFilter        One of PinFilter_None, PinFilter_Passive
       *
       *  @note see also configureDigitalFilter(), enableDigitalFilter(), disableDigitalFilter()
       */
      static void setInput(
            PinPull           pinPull           = Pcr::defaultPcrValue,
            PinAction         pinAction         = Pcr::defaultPcrValue,
            PinFilter         pinFilter         = Pcr::defaultPcrValue) {

         FtmBase::CheckPinExistsAndIsMapped<Info, channel> check;

#ifdef FTM_SC_PWMEN0_SHIFT
         // Disable output pin in FTM
         ftm->SC = ftm->SC & ~(1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif

         Pcr::setInput(pinPull,pinAction,pinFilter);
      }
#endif

   };

};

#ifdef FTM_QDCTRL_QUADEN_MASK

/**
 * Template class representing a FTM configured as a Quadrature decoder
 *
 * @tparam info      Information class for FTM
 *
 * @code
 *  using FtmQuadDecoder = FtmQuadDecoder_T<Ftm0Info>;
 *
 *  // Enable decoder
 *  FtmQuadDecoder::configure();
 *
 *  // Set pin filters
 *  FtmQuadDecoder::enableFilter(15);
 *
 *  // Reset position to zero
 *  // Movement will be +/- relative to this initial position
 *  FtmQuadDecoder::resetPosition();
 *
 *  for(;;) {
 *     console.write("Position =").writeln(QuadDecoder.getPosition());
 *  }
 * @endcode
 */
template <class Info>
class FtmQuadDecoder_T : public Info {

private:
   FtmQuadDecoder_T(const FtmQuadDecoder_T&) = delete;
   FtmQuadDecoder_T(FtmQuadDecoder_T&&) = delete;

   FtmBase::CheckPinExistsAndIsMapped<typename Info::InfoQUAD, 0> check0;
   FtmBase::CheckPinExistsAndIsMapped<typename Info::InfoQUAD, 1> check1;

public:

   // Make visible
   using Info::configure;

   // Default constructor
   FtmQuadDecoder_T() = default;

   /**
    * Set common fault and Timer Overflow Callback function\n
    *
    * @param[in] theCallback Callback function to execute when timer overflows. \n
    *                        nullptr to indicate none
    */
   void setCallback(typename Info::CallbackFunction theCallback) {
      FtmBase_T<Info>::setCallback(theCallback);
   }

   // Make these visible
   using Info::QuadInit;
   using Info::DefaultQuadInitValue;

   /** Hardware instance pointer */
   static constexpr HardwarePtr<FTMQUAD_Type> ftm = Info::baseAddress;

   /** Allow more convenient access associated Ftm */
   using OwningFtm = FtmBase_T<Info>;

   /** Allow access to PCR of associated phase-A pin */
   using Pcr0 = PcrTable_T<typename Info::InfoQUAD, 0>;

   /** Allow access to PCR of associated phase-B pin */
   using Pcr1 = PcrTable_T<typename Info::InfoQUAD, 1>;

   /**
    * Set Pin Control Register (PCR) values for PHA and PHB inputs.
    * This will map the pin to the Quadrature function (mux value) \n
    * The clock to the port will be enabled before changing the PCR
    *
    * @param[in] pinPull          One of PinPull_None, PinPull_Up, PinPull_Down
    * @param[in] pinAction        One of PinAction_None, etc (defaults to PinAction_None)
    * @param[in] pinFilter        One of PinFilter_None, PinFilter_Passive (defaults to PinFilter_None)
    */
   static void setInput(
         PinPull           pinPull           = Pcr0::defaultPcrValue,
         PinAction         pinAction         = Pcr0::defaultPcrValue,
         PinFilter         pinFilter         = Pcr0::defaultPcrValue) {

      Pcr0::setPCR(pinPull|pinAction|pinFilter);
      Pcr1::setPCR(pinPull|pinAction|pinFilter);
   }

   /**
    * Set polarity of Quadrature inputs.
    *
    * @param polarity Polarity of the two inputs
    */
   static void setPolarity(Polarity polarity) {
      if (polarity == ActiveHigh) {
         ftm->QDCTRL = ftm->QDCTRL & ~(FTM_QDCTRL_PHAPOL_MASK|FTM_QDCTRL_PHBPOL_MASK);
      }
      else {
         ftm->QDCTRL = ftm->QDCTRL | (FTM_QDCTRL_PHAPOL_MASK|FTM_QDCTRL_PHBPOL_MASK);
      }
   }

   /**
    * Set Quadrature mode
    *
    * @param quadratureMode   Mode of operation for the decoder
    */
   static void setMode(FtmQuadratureMode quadratureMode = FtmQuadratureMode_Phase_AB_Mode) {
      if (quadratureMode) {
         ftm->QDCTRL = ftm->QDCTRL | FTM_QDCTRL_QUADMODE_MASK;
      }
      else {
         ftm->QDCTRL = ftm->QDCTRL & ~FTM_QDCTRL_QUADMODE_MASK;
      }
   }

   /**
    * Set TOI Callback function\n
    * Note that one callback is shared by all channels of the FTM
    *
    * @param[in] theCallback Callback function to execute when timer overflows. \n
    *                        nullptr to indicate none
    */
   static __attribute__((always_inline)) void setTimerOverflowCallback(typename Info::CallbackFunction theCallback) {
      OwningFtm::setTimerOverflowCallback(theCallback);
   }

   /**
    * Enable Timer Overflow interrupts
    */
   static __attribute__((always_inline)) void enableTimerOverflowInterrupts() {
      OwningFtm::enableTimerOverflowInterrupts();
   }

   /**
    * Disable Timer Overflow interrupts
    */
   static __attribute__((always_inline)) void disableTimerOverflowInterrupts() {
      OwningFtm::disableTimerOverflowInterrupts();
   }

   /**
    * Configures all mapped pins associated with this peripheral
    */
   static void configureAllPins() {
      // Configure pins
      Info::InfoQUAD::initPCRs();
   }

   /**
    * Disabled all mapped pins associated with FTM
    *
    * @note Only the lower 16-bits of the PCR registers are modified
    */
   static void disableAllPins() {
      // Configure pins
      Info::InfoQUAD::clearPCRs();
   }

   /**
    * Basic enable of FTM
    * Includes enabling clock and configuring all pins if mapPinsOnEnable is selected in configuration
    */
   static void enable() {
      // Enable clock to peripheral
      Info::enableClock();

      if constexpr (Info::mapPinsOnEnable) {
         configureAllPins();
      }
   }

   /**
    * Disables the clock to FTM and all mappable pins
    */
   static void disable() {

      Info::disableNvicInterrupts();

      if constexpr (Info::mapPinsOnEnable) {
         disableAllPins();
      }

      // Disable FTM (clock source disabled)
      ftm->QDCTRL = 0;

      // Disable clock to peripheral interface
      Info::disableClock();
   }

// /FTM/InitMethod not found

   /**
    * Basic configuration of Quadrature decoder.
    * Includes configuring all pins if
    * mapPinsOnEnable setting is true
    *
    * @param ftmPrescale       Prescale value applied to the output of the quadrature decode before the counter.
    * @param ftmQuadratureMode Selects the encoding mode used to decode the input changes.
    */
   static void configure(
         FtmPrescale       ftmPrescale       = FtmPrescale_DivBy1,
         FtmQuadratureMode ftmQuadratureMode = FtmQuadratureMode_Phase_AB_Mode
         ) {
      // Assertions placed here so only checked if FtmQuadDecoder actually used
      static_assert(Info::InfoQUAD::info[0].pinIndex >= PinIndex::MIN_PIN_INDEX, "FtmQuadDecoder PHA is not mapped to a pin - Modify Configure.usbdm");
      static_assert(Info::InfoQUAD::info[1].pinIndex >= PinIndex::MIN_PIN_INDEX, "FtmQuadDecoder PHB is not mapped to a pin - Modify Configure.usbdm");

      enable();

      // Disable so immediate effect
      ftm->SC = 0;
      (void)ftm->SC;
      ftm->SC = FtmClockSource_Disabled|ftmPrescale;

      ftm->QDCTRL =
            FTM_QDCTRL_QUADEN_MASK|      // Enable Quadrature decoder
            ftmQuadratureMode;           // Quadrature mode
      ftm->CONF   = FTM_CONF_BDMMODE(3);
   }

   /**
    * Enable/disables filtering of quadrature inputs
    *
    * @param[in] filterValue 0=>disable, 1..15 filter length
    */
   static void enableFilter(int filterValue=7) {
      if (filterValue>0) {
         ftm->FILTER = ftm->FILTER | FTM_FILTER_CH0FVAL(filterValue)| FTM_FILTER_CH1FVAL(filterValue);
         ftm->QDCTRL = ftm->QDCTRL | FTM_QDCTRL_PHAFLTREN_MASK|FTM_QDCTRL_PHBFLTREN_MASK;
      }
      else {
         ftm->QDCTRL = ftm->QDCTRL & ~(FTM_QDCTRL_PHAFLTREN_MASK|FTM_QDCTRL_PHBFLTREN_MASK);
      }
   }

   /**
    * Reset position to zero
    */
   static void resetPosition() {
      // Note: writing ANY value clears CNT (cannot set value)
      ftm->CNT = 0;
   }

   /**
    * Get Quadrature decoder position
    *
    * @return Signed number representing position relative to reference location
    *
    * @note This can be viewed as a signed number +/- relative to the initial position.
    * @note This can be viewed as an unsigned number counting up from 0
    *       with overflow at 0xFFFF and underflow at 0.
    */
   static int16_t getPosition() {
      return (int16_t)(ftm->CNT);
   }

   /**
    * Get Quadrature decoder overflow direction.
    * This would be used in the overflow callback.
    *
    * @return Timer overflow direction. true => increasing, false => decreasing.
    *
    * @note Overflow occurs at MOD -> CNTIN, Underflow occurs at CNTIN -> MOD.
    */
   static bool getOverflowDirection() {
      return (bool)(ftm->QDCTRL & FTM_QDCTRL_TOFDIR_MASK);
   }
};
#endif // defined(FTM_QDCTRL_QUADEN_MASK)


/**
 * End FTM_Group
 * @}
 */

} // End namespace USBDM

#endif // /FTM/enablePeripheralSupport

#endif /* HEADER_FTM_H */

